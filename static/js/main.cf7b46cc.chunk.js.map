{"version":3,"sources":["Image/MarkerRed.png","Image/MarkerInfo.png","Image/MarkerBlack.png","Image/MarkerBlue.png","Image/MarkerOrange.png","Image/chevron-left.svg","Image/chevron-right.svg","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","kakaoApiKey","process","tourismApiKey","App","map","setMap","useState","mapContainer","useRef","mountainAreas","HikingRiskAreas","mountainPeaks","MountainPeaks","inputText","setInputText","places","setPlaces","selectedLocation","setSelectedLocation","selectedLocationName","setSelectedLocationName","tourismSpots","setTourismSpots","isSidebarOpen","setIsSidebarOpen","useEffect","script","document","createElement","async","src","concat","head","appendChild","onload","kakao","maps","load","container","current","options","center","LatLng","level","newMap","Map","forEach","peak","Marker","position","lat","lot","title","placeNm","setImage","MarkerImage","MarkerBlack","Size","area","imageSrc","plcTypeCd","MarkerRed","MarkerOrange","plcNm","searchPlaces","keyword","services","Places","keywordSearch","data","status","Status","OK","size","url","params","URLSearchParams","serviceKey","numOfRows","pageNo","MobileOS","MobileApp","arrange","mapX","longitude","toString","mapY","latitude","radius","listYN","_type","response","fetch","json","body","items","item","error","console","fetchNearbyTourismSpots","React","className","ref","MarkerInfo","alt","onClick","toggleSidebar","ChevronLeft","ChevronRight","type","value","onChange","e","target","trim","placeholder","length","place","index","key","place_name","y","x","moveLatLon","panTo","MarkerBlue","handlePlaceSelect","address_name","spot","addr1","parseFloat","dist","toFixed","reportWebVitals","onPerfEntry","Function","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactGA","initialize","set","page","window","location","pathname","pageview","search","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.cf7b46cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/MarkerRed.2c5095c2.png\";","module.exports = __webpack_public_path__ + \"static/media/MarkerInfo.75ac464a.png\";","module.exports = __webpack_public_path__ + \"static/media/MarkerBlack.1c5d878a.png\";","module.exports = __webpack_public_path__ + \"static/media/MarkerBlue.9fd7e7f7.png\";","module.exports = __webpack_public_path__ + \"static/media/MarkerOrange.a0a3e731.png\";","module.exports = __webpack_public_path__ + \"static/media/chevron-left.4394cbea.svg\";","module.exports = __webpack_public_path__ + \"static/media/chevron-right.2223e9be.svg\";","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nimport MarkerInfo from './Image/MarkerInfo.png';\nimport MarkerBlack from './Image/MarkerBlack.png';\nimport MarkerBlue from './Image/MarkerBlue.png';\nimport MarkerOrange from './Image/MarkerOrange.png';\nimport MarkerRed from './Image/MarkerRed.png';\n\nimport ChevronLeft from './Image/chevron-left.svg';\nimport ChevronRight from './Image/chevron-right.svg';\n\nimport HikingRiskAreas from './Data/hikingRiskAreas.json'; // 위험지역 데이터\nimport MountainPeaks from './Data/mountainPeaks.json'; // 산봉우리 데이터\n\n\nconst kakaoApiKey = process.env.REACT_APP_KAKAO_API_KEY;\nconst tourismApiKey = process.env.REACT_APP_TOURISM_API_KEY;\n\n/* global kakao */\n\nfunction App() {\n  \n  const [map, setMap] = useState(null); // 지도 객체를 저장하는 상태 변수\n    const mapContainer = useRef(null); // 지도 컨테이너를 참조하는 useRef 객체\n    const mountainAreas = HikingRiskAreas // 산악 위험 지역 정보를 저장하는 상태 변수\n    const mountainPeaks = MountainPeaks // 산악 봉우리 정보를 저장하는 상태 변수\n    const [inputText, setInputText] = useState(''); // 입력 상태를 관리하는 상태 변수\n    const [places, setPlaces] = useState([]); // 장소 검색 결과를 저장하는 상태 변수\n    const [selectedLocation, setSelectedLocation] = useState(null); // 선택된 위치 정보를 저장하는 상태 변수\n    const [selectedLocationName, setSelectedLocationName] = useState(null); // 선택된 위치의 이름을 저장하는 변수\n    const [tourismSpots, setTourismSpots] = useState([]); // 주변 관광지 정보를 저장하는 상태 변수\n    const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n    const toggleSidebar = () => {\n        setIsSidebarOpen(!isSidebarOpen);\n    };\n\n\n    // Kakao Maps API 스크립트 로드 후, 지도 초기화\n    useEffect(() => {\n        const script = document.createElement('script');\n        script.async = true;\n        script.src = `https://dapi.kakao.com/v2/maps/sdk.js?appkey=${kakaoApiKey}&autoload=false&libraries=services,clusterer`;\n        document.head.appendChild(script);\n\n        script.onload = () => {\n            kakao.maps.load(() => {\n                const container = mapContainer.current;\n                const options = {\n                    center: new kakao.maps.LatLng(36.88100097182494, 128.11089354647027), // 초기 지도 중심 좌표 설정\n                    level: 5 // 초기 지도 확대/축소 레벨 설정\n                };\n                const newMap = new kakao.maps.Map(container, options); // 새로운 지도 객체 생성\n                setMap(newMap); // 생성된 지도 객체를 상태 변수에 저장\n            });\n        };\n    }, []);\n\n    // 이펙트 함수는 지도 및 산악 정보(mountainAreas 및 mountainPeaks)가 변경될 때 호출됩니다.\n    useEffect(() => {\n        // 지도와 산악 지역 및 봉우리 데이터가 준비되어 있을 때만 실행합니다.\n        if (map) {\n            // 각 산봉우리에 대한 마커를 생성하고 설정합니다.\n            mountainPeaks.forEach(peak => {\n                const marker = new kakao.maps.Marker({\n                    map: map,\n                    position: new kakao.maps.LatLng(peak.lat, peak.lot),\n                    title: peak.placeNm\n                });\n                // 봉우리 마커 이미지를 설정합니다.\n                marker.setImage(new kakao.maps.MarkerImage(\n                    MarkerBlack, \n                    new kakao.maps.Size(24, 35)\n                ));\n            });\n\n            // 각 산악 지역에 대한 마커를 생성하고 설정합니다.\n            mountainAreas.forEach(area => {\n                let imageSrc;\n                // 산악 지역 유형에 따라 마커 이미지를 선택합니다.\n                switch (area.plcTypeCd) {\n                    case 'DANGER':\n                        imageSrc = MarkerRed;\n                        break;\n                    case 'SHELTER':\n                        imageSrc = MarkerOrange;\n                        break;\n                    default:\n                        imageSrc = MarkerRed;\n                }\n                const marker = new kakao.maps.Marker({\n                    map: map,\n                    position: new kakao.maps.LatLng(area.lat, area.lot),\n                    title: area.plcNm\n                });\n                // 산악 지역 마커 이미지를 설정합니다.\n                marker.setImage(new kakao.maps.MarkerImage(\n                    imageSrc, \n                    new kakao.maps.Size(24, 35)\n                ));\n            });\n        }\n    }, [map]);\n\n     // 입력 텍스트 변경 시 호출되는 핸들러 함수\n     const handleInputChange = (e) => {\n        const { value } = e.target;\n        setInputText(value);\n        if (!value.trim()) {\n            setPlaces([]); // 입력이 공백인 경우 장소 목록 초기화\n            return;\n        }\n        searchPlaces(value); // 장소 검색 함수 호출\n    };\n\n    // Kakao Maps Places API를 사용하여 장소를 검색하는 함수\n    const searchPlaces = (keyword) => {\n        const ps = new kakao.maps.services.Places();\n        const options = {\n          size: 5 // 최대 검색 결과 수 설정\n        };\n\n        ps.keywordSearch(keyword, (data, status) => {\n            if (status === kakao.maps.services.Status.OK) {\n                setPlaces(data); // 검색 결과를 상태 변수에 설정\n            } else {\n                setPlaces([]); // 검색 결과가 없는 경우 빈 배열 설정\n            }\n        }, options);\n    };\n\n    // 장소 선택 시 호출되는 핸들러 함수\n    const handlePlaceSelect = (place) => {\n        //console.log(`Selected place: ${place.place_name}`);\n        //console.log(`Address: ${place.address_name}`);\n        //console.log(`Coordinates: Latitude ${place.y}, Longitude ${place.x}`);\n\n        setSelectedLocationName(place.place_name);\n\n        // 선택된 위치 좌표 설정\n        setSelectedLocation({\n            latitude: place.y,\n            longitude: place.x\n        });\n\n        // 선택된 주소로 지도 이동\n        if (map) {\n            const moveLatLon = new kakao.maps.LatLng(place.y, place.x);\n            map.panTo(moveLatLon);\n\n            // 선택된 주소에 마커 추가\n            const marker = new kakao.maps.Marker({\n                map: map,\n                position: moveLatLon,\n                title: place.place_name\n            });\n            marker.setImage(new kakao.maps.MarkerImage(\n                MarkerBlue, \n                new kakao.maps.Size(24, 35)\n            ));\n        }\n\n        setPlaces([]);\n    };\n\n    // 선택된 위치 변경 시 호출되는 효과\n    useEffect(() => {\n        const fetchNearbyTourismSpots = async () => {\n            if (selectedLocation) {\n                const url = 'https://apis.data.go.kr/B551011/KorService1/locationBasedList1';\n                const params = new URLSearchParams({\n                    serviceKey: tourismApiKey,\n                    numOfRows: '20',\n                    pageNo: '1',\n                    MobileOS: 'ETC',\n                    MobileApp: 'SafeHikingTour',\n                    arrange: 'A',\n                    mapX: selectedLocation.longitude.toString(),\n                    mapY: selectedLocation.latitude.toString(),\n                    radius: '5000',\n                    listYN: 'Y',\n                    _type: 'json'\n                });\n\n                try {\n                    const response = await fetch(`${url}?${params.toString()}`);\n                    const data = await response.json();\n                    setTourismSpots(data.response.body.items.item); // 주변 관광지 정보 설정\n                } catch (error) {\n                    console.error('Error fetching nearby tourism spots:', error);\n                }\n            }\n        };\n\n        fetchNearbyTourismSpots();\n    }, [selectedLocation]);\n\n\n\n  return ( \n    <div className=\"App\">\n      <header className=\"App-header\">\n      <div className='hikingMap'>\n            <div className='mapContainer' ref={mapContainer}/>\n            <img className='markerInfoImg' src={MarkerInfo} alt=\"마커 설명\" />\n            \n            \n            <div className={`info ${isSidebarOpen ? 'open' : 'closed'}`}>\n                <div className='infoToggle' onClick={toggleSidebar}>\n                    <img src={isSidebarOpen ? ChevronLeft : ChevronRight} alt=\"Toggle Sidebar\" />\n                </div>\n                <div className='search'>\n                    <input\n                        type=\"text\"\n                        value={inputText}\n                        onChange={handleInputChange}\n                        placeholder=\"장소 검색\"\n                    />\n                    {places.length > 0 && (\n                        <ul>\n                            {places.map((place, index) => (\n                                <li key={index} onClick={() => handlePlaceSelect(place)}>\n                                    <button><strong>{place.place_name}</strong><br />{place.address_name}</button>\n                                </li>\n                            ))}\n                        </ul>\n                    )}\n                </div>\n\n                <div className='tourList'>\n                    <h3>\"{selectedLocationName}\" 주변 관광지</h3>\n                    <ul>\n                        {tourismSpots.map((spot, index) => (\n                            <li key={index}>\n                                <strong>{spot.title}</strong><br />\n                                {spot.addr1}<br />\n                                ({(parseFloat(spot.dist)/1000).toFixed(1)}km)\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            </div>\n        </div>\n      </header> \n    </div>\n  ); \n}\n \nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//Google Analytics\nimport ReactGA from 'react-ga';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nconst trackingId = \"G-XXXXXXXXXX\"; // 여기에 Google Analytics 측정 ID를 입력하세요\nReactGA.initialize(trackingId);\n\n// 페이지뷰 추적 함수\nconst logPageView = () => {\n  ReactGA.set({ page: window.location.pathname });\n  ReactGA.pageview(window.location.pathname + window.location.search);\n};\n\n// 페이지가 로드될 때 페이지뷰 추적\nlogPageView();\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}